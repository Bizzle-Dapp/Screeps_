{"version":3,"file":"main.js","sources":["../src/Constants.js","../src/Economy/HarvesterActions.js","../src/Economy/_EconomyController.js","../src/Logistics/UpgraderActions.js","../src/Logistics/_LogisticsController.js","../src/Population/HarvesterConstruction.js","../src/Population/UpgraderConstruction.js","../src/Population/_PopulationController.js","../src/main.js"],"sourcesContent":["const SPAWNER_ROOMS = Object.values(Game.spawns).map((v) => v.room.name);\r\n\r\n/**\r\n * Returns key base information\r\n */\r\nconst generateBaseConstants = () => {\r\n    // Once we have multiple spawns, pass key/value pairs including nearby resources related to each spawner\r\n    const MAIN_SPAWN = Game.rooms[SPAWNER_ROOMS[0]]\r\n        .find(FIND_MY_STRUCTURES)\r\n        .filter((s) => s.structureType == STRUCTURE_SPAWN)[0];\r\n\r\n    const POTENTIAL_RESOURCE = Game.rooms[SPAWNER_ROOMS[0]].find(FIND_SOURCES_ACTIVE);\r\n\r\n    return {\r\n        MAIN_SPAWN,\r\n        SPAWNER_ROOMS,\r\n        POTENTIAL_RESOURCE\r\n    }\r\n}\r\n\r\nexport default generateBaseConstants;\r\n","\r\nfunction harvest(baseConstants) {\r\n    const { MAIN_SPAWN, POTENTIAL_RESOURCE } = baseConstants;\r\n\r\n    let harvesters = _.filter(Game.creeps,\r\n        (creep) => creep.memory.role == 'harvester');\r\n    // Move Harvester to location, harvest, then return to spawn and deposit\r\n    harvesters.forEach((creep) => {\r\n        if (!creep.memory.harvesting && creep.store[RESOURCE_ENERGY] === 0) {\r\n            creep.memory.harvesting = true;\r\n            creep.say('ðŸ”„harvest', true);\r\n        }\r\n        if (creep.memory.harvesting && creep.store.getFreeCapacity() === 0) {\r\n            creep.memory.harvesting = false;\r\n            creep.say('ðŸ’²banking', true);\r\n        }\r\n        if (creep.memory.harvesting && creep.harvest(POTENTIAL_RESOURCE[creep.memory.resourceDivide]) == ERR_NOT_IN_RANGE) {\r\n            creep.moveTo(\r\n                POTENTIAL_RESOURCE[creep.memory.resourceDivide],\r\n                { visualizePathStyle: { stroke: '#ffaa00' } });\r\n\r\n        }\r\n        if (!creep.memory.harvesting) {\r\n            let deposit = MAIN_SPAWN.room.find(FIND_MY_STRUCTURES, {\r\n                filter: (i) => ((i.structureType == STRUCTURE_CONTAINER) &&\r\n                    i.store.getFreeCapacity() > 0)\r\n            });\r\n            \r\n            if (creep.transfer(MAIN_SPAWN, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                creep.moveTo(MAIN_SPAWN,\r\n                    { visualizePathStyle: { stroke: '#ffffff' } });\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nexport default harvest;","import harvest from './HarvesterActions';\r\n\r\nfunction economyController(baseConstants) {\r\n    harvest(baseConstants);\r\n}\r\n\r\nexport default economyController;","\r\nconst upgrade = (baseConstants) => {\r\n    const { POTENTIAL_RESOURCE } = baseConstants;\r\n\r\n    let upgraders = _.filter(Game.creeps,\r\n        (creep) => creep.memory.role == 'upgrader');\r\n    // Move Harvester to location, harvest, then return to spawn and diposit\r\n    upgraders.forEach((creep) => {\r\n        if(creep.memory.upgrading && creep.store[RESOURCE_ENERGY] === 0) {\r\n            creep.memory.upgrading = false;\r\n            creep.say('ðŸ”„harvest', true);\r\n        }\r\n        if(!creep.memory.upgrading && creep.store.getFreeCapacity() === 0){\r\n            creep.memory.upgrading = true;\r\n            creep.say('ðŸ’ªupgrade', true);\r\n        }\r\n        if (!creep.memory.upgrading && creep.store[RESOURCE_ENERGY] < creep.store.getCapacity()) {\r\n            if (creep.harvest(POTENTIAL_RESOURCE[creep.memory.resourceDivide]) == ERR_NOT_IN_RANGE) {\r\n                creep.moveTo(\r\n                    POTENTIAL_RESOURCE[creep.memory.resourceDivide], \r\n                    { visualizePathStyle: { stroke: '#ffaa00' } \r\n                });\r\n            }\r\n        } else {\r\n            if(creep.room.controller) {\r\n\r\n                if(creep.room.controller.sign.username !== 'Bizzle_Dapp'\r\n                    && creep.signController(creep.room.controller, \"Our Territory\") == ERR_NOT_IN_RANGE) {\r\n                    creep.moveTo(creep.room.controller,\r\n                        { visualizePathStyle: { stroke: '#ffaa00' }\r\n                    });\r\n                }\r\n                if(creep.upgradeController(creep.room.controller) == ERR_NOT_IN_RANGE) {\r\n                    creep.moveTo(creep.room.controller,\r\n                        { visualizePathStyle: { stroke: '#ffaa00' }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nexport default upgrade;","import upgrade from './UpgraderActions';\r\n\r\nfunction logisticsController(baseConstants) {\r\n    upgrade(baseConstants);\r\n}\r\n\r\nexport default logisticsController;","\r\nfunction harvesterConstruction(baseConstants) {\r\n    const { MAIN_SPAWN } = baseConstants;\r\n    // Spawn a Harvester\r\n    let harvesters = _.filter(Game.creeps,\r\n        (creep) => creep.memory.role == 'harvester');\r\n    if (harvesters.length < 4) {\r\n        let id = Date.now();\r\n        MAIN_SPAWN.spawnCreep([WORK, CARRY, MOVE], `Worker-${id.toString()}`, {\r\n            memory: { role: 'harvester', resourceDivide: (harvesters.length % 2)  }\r\n        });\r\n    }\r\n}\r\n\r\nexport default harvesterConstruction;","\r\nfunction upgraderConstruction(baseConstants) {\r\n    const { MAIN_SPAWN } = baseConstants;\r\n    // Spawn an Upgrader\r\n    let upgraders = _.filter(Game.creeps,\r\n        (creep) => creep.memory.role == 'upgrader');\r\n    if (upgraders.length < 1) {\r\n        let id = Date.now();\r\n        MAIN_SPAWN.spawnCreep([WORK, CARRY, MOVE], `Upgrader-${id.toString()}`, {\r\n            memory: { role: 'upgrader', resourceDivide: (upgraders.length % 2)  }\r\n        });\r\n    }\r\n}\r\n\r\nexport default upgraderConstruction;","import harvesterConstruction from './HarvesterConstruction';\r\nimport upgraderConstruction from './UpgraderConstruction';\r\n\r\nfunction populationController(baseConstants) {\r\n    \r\n\r\n    harvesterConstruction(baseConstants);\r\n    upgraderConstruction(baseConstants);\r\n}\r\n\r\nexport default populationController;","import generateBaseConstants from './Constants';\r\n\r\nimport economyController from './Economy/_EconomyController';\r\nimport logisticsController from './Logistics/_LogisticsController';\r\nimport populationController from './Population/_PopulationController';\r\n\r\nmodule.exports.loop = function () {\r\n    const baseConstants = generateBaseConstants();\r\n\r\n    economyController(baseConstants);\r\n    logisticsController(baseConstants);\r\n    populationController(baseConstants);\r\n\r\n    clearance();\r\n}\r\n\r\nfunction clearance(){\r\n    for(var name in Memory.creeps) {\r\n        if(!Game.creeps[name]) {\r\n            delete Memory.creeps[name];\r\n        }\r\n    }\r\n}"],"names":[],"mappings":"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"}