{"version":3,"file":"main.js","sources":["../src/Constants.js","../src/Economy/HarvesterActions.js","../src/Economy/_EconomyController.js","../src/Logistics/UpgraderActions.js","../src/Logistics/_LogisticsController.js","../src/Population/HarvesterConstruction.js","../src/Population/UpgraderConstruction.js","../src/Population/BuilderConstruction.js","../src/Population/_PopulationController.js","../src/Construction/ConstructionAnalyser.js","../src/Construction/BaseFabrication.js","../src/Construction/BuilderActions.js","../src/Construction/_ConstructionController.js","../src/main.js"],"sourcesContent":["const SPAWNER_ROOMS = Object.values(Game.spawns).map((v) => v.room.name);\r\n\r\n/**\r\n * Returns key base information\r\n */\r\nconst generateBaseConstants = () => {\r\n    // Once we have multiple spawns, pass key/value pairs including nearby resources related to each spawner\r\n    const MAIN_SPAWN = Game.rooms[SPAWNER_ROOMS[0]]\r\n        .find(FIND_MY_STRUCTURES)\r\n        .filter((s) => s.structureType == STRUCTURE_SPAWN)[0];\r\n\r\n    const POTENTIAL_RESOURCE = Game.rooms[SPAWNER_ROOMS[0]].find(FIND_SOURCES_ACTIVE);\r\n\r\n    return {\r\n        MAIN_SPAWN,\r\n        SPAWNER_ROOMS,\r\n        POTENTIAL_RESOURCE\r\n    }\r\n}\r\n\r\nexport default generateBaseConstants;\r\n","\r\nfunction harvest(baseConstants) {\r\n    const { MAIN_SPAWN, POTENTIAL_RESOURCE } = baseConstants;\r\n\r\n    const harvesters = _.filter(Game.creeps,\r\n        (creep) => creep.memory.role == 'harvester');\r\n    // Move Harvester to location, harvest, then return to spawn and deposit\r\n    harvesters.forEach((creep) => {\r\n        if (!creep.memory.harvesting && creep.store[RESOURCE_ENERGY] === 0) {\r\n            creep.memory.harvesting = true;\r\n            creep.say('🔄harvest', true);\r\n        }\r\n        if (creep.memory.harvesting && creep.store.getFreeCapacity() === 0) {\r\n            creep.memory.harvesting = false;\r\n            creep.say('💲banking', true);\r\n        }\r\n        creepHarvest(creep, MAIN_SPAWN, POTENTIAL_RESOURCE);\r\n    });\r\n}\r\n\r\nexport const creepHarvest = (creep, MAIN_SPAWN, POTENTIAL_RESOURCE) => {\r\n    if (!creep.memory.harvesting) {\r\n        let deposit = MAIN_SPAWN.room.find(FIND_MY_STRUCTURES, {\r\n            filter: (i) => ((i.structureType == STRUCTURE_CONTAINER) &&\r\n                i.store.getFreeCapacity() > 0)\r\n        });\r\n        \r\n        if (creep.transfer(MAIN_SPAWN, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n            creep.moveTo(MAIN_SPAWN,\r\n                { visualizePathStyle: { stroke: '#ffffff' } });\r\n        }\r\n    } else {\r\n        if (creep.harvest(POTENTIAL_RESOURCE[creep.memory.resourceDivide]) == ERR_NOT_IN_RANGE) {\r\n            creep.moveTo(\r\n                POTENTIAL_RESOURCE[creep.memory.resourceDivide],\r\n                { visualizePathStyle: { stroke: '#ffaa00' } });\r\n        }\r\n    }\r\n}\r\n\r\nexport default harvest;","import harvest from './HarvesterActions';\r\n\r\nfunction economyController(baseConstants) {\r\n    harvest(baseConstants);\r\n}\r\n\r\nexport default economyController;","\r\nconst upgrade = (baseConstants) => {\r\n    const { POTENTIAL_RESOURCE } = baseConstants;\r\n\r\n    let upgraders = _.filter(Game.creeps,\r\n        (creep) => creep.memory.role == 'upgrader');\r\n    // Move Harvester to location, harvest, then return to spawn and diposit\r\n    upgraders.forEach((creep) => {\r\n        if(creep.memory.upgrading && creep.store[RESOURCE_ENERGY] === 0) {\r\n            creep.memory.upgrading = false;\r\n            creep.say('🔄harvest', true);\r\n        }\r\n        if(!creep.memory.upgrading && creep.store.getFreeCapacity() === 0){\r\n            creep.memory.upgrading = true;\r\n            creep.say('💪upgrade', true);\r\n        }\r\n        creepUpgrade(creep, POTENTIAL_RESOURCE);\r\n    });\r\n}\r\n\r\nexport const creepUpgrade = (creep, POTENTIAL_RESOURCE) => {\r\n    if (!creep.memory.upgrading && creep.store[RESOURCE_ENERGY] < creep.store.getCapacity()) {\r\n        if (creep.harvest(POTENTIAL_RESOURCE[creep.memory.resourceDivide]) == ERR_NOT_IN_RANGE) {\r\n            creep.moveTo(\r\n                POTENTIAL_RESOURCE[creep.memory.resourceDivide], \r\n                { visualizePathStyle: { stroke: '#ffaa00' } \r\n            });\r\n        }\r\n    } else {\r\n        if(creep.room.controller) {\r\n            if(creep.room.controller.sign.username !== 'Bizzle_Dapp'\r\n                && creep.signController(creep.room.controller, \"Our Territory\") == ERR_NOT_IN_RANGE) {\r\n                creep.moveTo(creep.room.controller,\r\n                    { visualizePathStyle: { stroke: '#ffaa00' }\r\n                });\r\n            }\r\n            if(creep.upgradeController(creep.room.controller) == ERR_NOT_IN_RANGE) {\r\n                creep.moveTo(creep.room.controller,\r\n                    { visualizePathStyle: { stroke: '#ffaa00' }\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default upgrade;","import upgrade from './UpgraderActions';\r\n\r\nfunction logisticsController(baseConstants) {\r\n    upgrade(baseConstants);\r\n}\r\n\r\nexport default logisticsController;","\r\nfunction harvesterConstruction(baseConstants) {\r\n    const { MAIN_SPAWN } = baseConstants;\r\n    // Spawn a Harvester\r\n    let harvesters = _.filter(Game.creeps,\r\n        (creep) => creep.memory.role == 'harvester');\r\n    if (harvesters.length < 4) {\r\n        let id = Date.now();\r\n        MAIN_SPAWN.spawnCreep([WORK, CARRY, MOVE], `Worker-${id.toString()}`, {\r\n            memory: { role: 'harvester', resourceDivide: (harvesters.length % 2)  }\r\n        });\r\n    }\r\n}\r\n\r\nexport default harvesterConstruction;","\r\nfunction upgraderConstruction(baseConstants) {\r\n    const { MAIN_SPAWN } = baseConstants;\r\n    // Spawn an Upgrader\r\n    let upgraders = _.filter(Game.creeps,\r\n        (creep) => creep.memory.role == 'upgrader');\r\n    if (upgraders.length < 1) {\r\n        let id = Date.now();\r\n        MAIN_SPAWN.spawnCreep([WORK, CARRY, MOVE], `Upgrader-${id.toString()}`, {\r\n            memory: { role: 'upgrader', resourceDivide: (upgraders.length % 2)  }\r\n        });\r\n    }\r\n}\r\n\r\nexport default upgraderConstruction;","\r\nfunction builderConstruction(baseConstants) {\r\n    // Spawn a Builder\r\n    let builders = _.filter(Game.creeps,\r\n        (creep) => creep.memory.role == 'builder');\r\n    if (builders.length < 3) {\r\n        let id = Date.now();\r\n        baseConstants.MAIN_SPAWN.spawnCreep([WORK, WORK, CARRY, MOVE], `Builder-${id.toString()}`, {\r\n            memory: { role: 'builder', resourceDivide: (builders.length % 2)  }\r\n        });\r\n    }\r\n}\r\n\r\nexport default builderConstruction;","import harvesterConstruction from './HarvesterConstruction';\r\nimport upgraderConstruction from './UpgraderConstruction';\r\nimport builderConstruction from './BuilderConstruction';\r\n\r\nfunction populationController(baseConstants) {\r\n    // Priority of lowest to highest.\r\n    builderConstruction(baseConstants);\r\n    upgraderConstruction(baseConstants);\r\n    harvesterConstruction(baseConstants);\r\n}\r\n\r\nexport default populationController;","import _ from \"lodash\";\r\n\r\n/**\r\n * Determines and returns buildable positions around the spawner\r\n * @param {{\"MAIN_SPAWN\": Spawner}} baseConstants - An object of constant defined values specific to the base\r\n * @param {number} radius - A numeric value to check around the spawn in each direction\r\n * @returns {[{\"x\": number, \"y\": number}]} An array of buildable x,y coordinate objects\r\n */\r\nconst spawnAreaConstructionAnalyser = (baseConstants, radius) => {\r\n    const { MAIN_SPAWN } = baseConstants;\r\n\r\n    const room = Game.rooms[MAIN_SPAWN.room.name];\r\n    // Scan area\r\n    const scannedArea = room.lookAtArea(\r\n        MAIN_SPAWN.pos.y - radius,\r\n        MAIN_SPAWN.pos.x - radius,\r\n        MAIN_SPAWN.pos.y + radius,\r\n        MAIN_SPAWN.pos.x + radius,\r\n        true\r\n    );\r\n    // Create an ignore list of all positions occupied by something other than terrain\r\n    const ignoreList = [];\r\n    _.forEach(scannedArea.filter(x => x.type !== 'terrain'), x => {\r\n        ignoreList.push({ x: x.x, y: x.y });\r\n    });\r\n    // Filter the scannedArea of any positions contained in the ignoreList\r\n    const filteredArea = []\r\n    _.forEach(scannedArea.filter(x => x.type === 'terrain' && x.terrain === 'plain'), x => {\r\n        if (!ignoreList.find(y =>  y.x == x.x && y.y == x.y)) {\r\n            filteredArea.push(x);\r\n        };\r\n    })\r\n    // Display our available locations\r\n    filteredArea.forEach((areaDetails) => {\r\n        room.visual.circle(areaDetails.x, areaDetails.y,\r\n            {\r\n                fill: 'transparent',\r\n                radius: 0.1,\r\n                stroke: 'green'\r\n            });\r\n    });\r\n\r\n    return filteredArea\r\n}\r\n\r\nexport default spawnAreaConstructionAnalyser;\r\n","import _ from \"lodash\";\r\n\r\n/**\r\n * -- Rules for a successful base; Part 1.1 -- \r\n[1] Only use odd x/y values for STRUCTURES: \r\nCircumvents the chance of building screeps into a box, ignores that some structures are walkable.\r\n\r\n[1.5] Only use even x/y values for ROADS:\r\nScreeps go vrooooom.\r\n\r\n[2]Position ((array.length / 2) + 1) on x/y min/max becomes TOWER_SPOT: \r\nAllocate a fixed position on all sides for a tower defence.\r\n\r\n[3]Use all min/max x/y values for walls. Except position (array.length / 2) on x/y min/max && TOWER_SPOT: \r\nLeaves a gap on all sides to enter and leave - a bottle neck.\r\n */\r\n\r\nconst baseFabrication = (baseConstants, buildingPositions, RADIUS) => {\r\n    const { SPAWNER_ROOMS, MAIN_SPAWN } = baseConstants;\r\n\r\n    const room = Game.rooms[SPAWNER_ROOMS[0]];\r\n    let constructionSites = room.find(FIND_MY_CONSTRUCTION_SITES).length;\r\n    _.forEach(buildingPositions, (position) => {\r\n        // Cap at 10 construction sites so as to not overwhelm workers.\r\n        if(constructionSites.length >= 10) { \r\n            return; \r\n        };\r\n        fabricationManagement(position, room, MAIN_SPAWN, RADIUS);\r\n        constructionSites++;\r\n    });\r\n}\r\n\r\nconst fabricationManagement = (position, room, MAIN_SPAWN, RADIUS) => {\r\n    const { x, y} = position;\r\n\r\n    // If x +/- and y +/- align with RADIUS distance in all directions. Build a Road.\r\n    if( x === (MAIN_SPAWN.pos.x + RADIUS) && y === MAIN_SPAWN.pos.y || \r\n        x === (MAIN_SPAWN.pos.x - RADIUS) && y === MAIN_SPAWN.pos.y ||\r\n        x === MAIN_SPAWN.pos.x && y === (MAIN_SPAWN.pos.y - RADIUS) ||\r\n        x === MAIN_SPAWN.pos.x && y === (MAIN_SPAWN.pos.y + RADIUS) ) {\r\n            // Road\r\n            room.createConstructionSite(x, y, STRUCTURE_ROAD);\r\n            return;\r\n        }\r\n\r\n\r\n    // If x or y are equal to Spawn positions vertexes +/- RADIUS; Build a wall.\r\n    // Except where both are +/- RADUIS, build a Road here.\r\n    if( x === (MAIN_SPAWN.pos.x + RADIUS) || x === (MAIN_SPAWN.pos.x - RADIUS) ||\r\n        y === (MAIN_SPAWN.pos.y + RADIUS) || y === (MAIN_SPAWN.pos.y - RADIUS) ) {\r\n            // Wall\r\n            room.createConstructionSite(x, y, STRUCTURE_WALL);\r\n            return;\r\n        }\r\n\r\n    // Logical nightmare.\r\n    // switch (x % 2){\r\n    //     case 1:\r\n    //         switch (y % 2){\r\n    //             case 1:\r\n    //                 // X Odd Y Odd\r\n    //                 break;\r\n    //             default:\r\n    //                 // X Odd  Y Even\r\n    //                 break;\r\n    //         }\r\n    //         break;\r\n    //     default:\r\n    //         switch (y % 2){\r\n    //             case 1:\r\n    //                 // X Even Y Odd\r\n    //                 break;\r\n    //             default:\r\n    //                 // X Even Y Even\r\n    //                 break;\r\n    //         }\r\n    //         break;\r\n    // }\r\n}\r\n\r\n\r\nexport default baseFabrication;","import { creepHarvest } from '../Economy/HarvesterActions';\r\nimport { creepUpgrade } from '../Logistics/UpgraderActions';\r\n\r\nfunction build(baseConstants) {\r\n    const { MAIN_SPAWN, POTENTIAL_RESOURCE } = baseConstants;\r\n\r\n    const builders = _.filter(Game.creeps,\r\n        (creep) => creep.memory.role == 'builder');\r\n\r\n    _.forEach(builders, (creep) => {\r\n        if (!creep.memory.building && creep.store.getFreeCapacity() === 0) {\r\n            creep.memory.building = true;\r\n            creep.say('🏗build', true);\r\n        }\r\n        if (creep.memory.building && creep.store[RESOURCE_ENERGY] === 0) {\r\n            creep.memory.building = false;\r\n            creep.say('🔄harvest', true);\r\n        }\r\n        const unsortedSites = creep.room.find(FIND_CONSTRUCTION_SITES);\r\n\r\n        if (unsortedSites.length > 0) {\r\n            // Construction Sites Available to build\r\n            const sortedSites = unsortedSites.sort((a, b) => {\r\n                if (a.progress > b.progress)\r\n                    return -1;\r\n                if (a.progress < b.progress)\r\n                    return 1;\r\n                return 0;\r\n            });\r\n\r\n            if (creep.memory.building && creep.build(sortedSites[0]) == ERR_NOT_IN_RANGE) {\r\n                creep.moveTo(sortedSites[0], { visualizePathStyle: { stroke: '#ffffff' } });\r\n            } else if (!creep.memory.building && creep.harvest(POTENTIAL_RESOURCE[creep.memory.resourceDivide]) == ERR_NOT_IN_RANGE) {\r\n                creep.moveTo(\r\n                    POTENTIAL_RESOURCE[creep.memory.resourceDivide],\r\n                    { visualizePathStyle: { stroke: '#ffaa00' } });\r\n            }\r\n        }\r\n        else {\r\n            // No construction Sites Available to build\r\n            // If containers available to fill - do so\r\n            // creepHarvest(creep, MAIN_SPAWN, POTENTIAL_RESOURCE);\r\n            // Otherwise, upgrade the controller!\r\n            creepUpgrade(creep, POTENTIAL_RESOURCE);\r\n        }\r\n    });\r\n}\r\n\r\nexport default build;","import spawnAreaConstructionAnalyser from './ConstructionAnalyser';\r\nimport baseFabrication from './BaseFabrication';\r\nimport build from './BuilderActions';\r\nimport _ from 'lodash';\r\n\r\nlet lastScanned = undefined;\r\n\r\nconst constructionController = (baseConstants) => {\r\n    const { SPAWNER_ROOMS } = baseConstants;\r\n    const TEN_SECONDS = 10000;\r\n    const RADIUS = 10;\r\n\r\n    let totalCreeps = 0;\r\n    \r\n    _.forEach(SPAWNER_ROOMS, (roomName) => {\r\n        totalCreeps += Game.rooms[roomName].find(FIND_MY_CREEPS).length;\r\n    })\r\n\r\n    // Periodically detect available building space\r\n    if(!lastScanned && totalCreeps > 3 || \r\n        lastScanned < (Date.now() - TEN_SECONDS) && totalCreeps > 3 ){\r\n        const buildingPositions = spawnAreaConstructionAnalyser(baseConstants, RADIUS);\r\n        baseFabrication(baseConstants, buildingPositions, RADIUS)\r\n        lastScanned = Date.now();\r\n    };\r\n    build(baseConstants);\r\n}\r\n\r\nexport default constructionController;","import generateBaseConstants from './Constants';\r\n\r\nimport economyController from './Economy/_EconomyController';\r\nimport logisticsController from './Logistics/_LogisticsController';\r\nimport populationController from './Population/_PopulationController';\r\nimport constructionController from './Construction/_ConstructionController';\r\n\r\nmodule.exports.loop = function () {\r\n    const baseConstants = generateBaseConstants();\r\n\r\n    economyController(baseConstants);\r\n    logisticsController(baseConstants);\r\n    populationController(baseConstants);\r\n    constructionController(baseConstants);\r\n    clearance();\r\n}\r\n\r\nfunction clearance(){\r\n    for(var name in Memory.creeps) {\r\n        if(!Game.creeps[name]) {\r\n            delete Memory.creeps[name];\r\n        }\r\n    }\r\n}"],"names":["_"],"mappings":"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"}